const express = require("express");
const router = express.Router();
const db = require("../config/db");

// ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∏ –æ—Ü–µ–Ω–∫—É –≤ —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
// ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∏ –æ—Ü–µ–Ω–∫—É
router.post("/mark", async (req, res) => {
    try {
        let { studentId, lessonId, status, grade } = req.body;

        if (!studentId || !lessonId) {
            return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
        }

        // ‚úÖ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å—Ç–∞–≤–∏–º "PRESENT" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!status) status = "PRESENT";

        // üü¢ **–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**
        await db.promise().query(
            `INSERT INTO attendance (studentId, lessonId, status, last_scanned_at) 
             VALUES (?, ?, ?, NOW()) 
             ON DUPLICATE KEY UPDATE status=?, last_scanned_at=NOW()`,
            [studentId, lessonId, status, status]
        );

        // ‚úÖ –ï—Å–ª–∏ `grade` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, —Å—Ç–∞–≤–∏–º `NULL`
        if (grade === undefined) {
            grade = null;
        }

        await db.promise().query(
            `INSERT INTO grades (studentId, lessonId, subjectId, grade, createdAt) 
             VALUES (?, ?, (SELECT subjectId FROM lessons WHERE id = ?), ?, NOW()) 
             ON DUPLICATE KEY UPDATE grade = IF(grades.grade IS NULL, VALUES(grade), grades.grade)`,
            [studentId, lessonId, lessonId, grade]
        );
        
        

        // üü¢ **–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª**
        const [[lastScanned]] = await db.promise().query(
            `SELECT u.name, a.last_scanned_at 
             FROM attendance a
             JOIN users u ON a.studentId = u.id
             WHERE a.lessonId = ?
             ORDER BY a.last_scanned_at DESC
             LIMIT 1`,
            [lessonId]
        );

        res.json({
            message: "‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ!",
            last_scanned: lastScanned || null // –ö—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫—Ç–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª QR, –≤–∫–ª—é—á–∞—è –æ—Ü–µ–Ω–∫–∏
router.get("/list", async (req, res) => {
    try {
        const { lessonId } = req.query;
        if (!lessonId) return res.status(400).json({ error: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω lessonId" });

        console.log(`üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤—à–∏—Ö –¥–ª—è —É—Ä–æ–∫–∞ ${lessonId}`);

        const [rows] = await db.promise().query(
            `SELECT u.name, a.status, g.grade 
             FROM attendance a
             JOIN users u ON a.studentId = u.id
             LEFT JOIN grades g ON a.studentId = g.studentId AND a.lessonId = g.lessonId
             WHERE a.lessonId = ?`, 
            [lessonId]
        );

        console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:", rows); // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è

        res.json(rows);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});



module.exports = router;
