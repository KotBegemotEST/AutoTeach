const express = require("express");
const router = express.Router();
const db = require("../config/db");

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ (–æ—Ü–µ–Ω–∫–∞ –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å)
router.post("/update", async (req, res) => {
    try {
        const { studentId, lessonId, grade, attendance_status, attendance_comment, subjectId } = req.body;

        if (!studentId || !lessonId || !subjectId) {
            return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å studentId, lessonId –∏ subjectId" });
        }

        // üõ† –ï—Å–ª–∏ `grade` === "NO GRADE", —Å—Ç–∞–≤–∏–º `NULL`
        const gradeValue = grade === "NO GRADE" ? null : grade;

        // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å)
        if (grade !== undefined) {
            const [existingGrade] = await db.promise().query(
                `SELECT * FROM grades WHERE studentId = ? AND lessonId = ?`,
                [studentId, lessonId]
            );

            if (existingGrade.length > 0) {
                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
                await db.promise().query(
                    `UPDATE grades SET grade = ?, createdAt = NOW() WHERE studentId = ? AND lessonId = ?`,
                    [gradeValue, studentId, lessonId]
                );
            } else {
                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º
                await db.promise().query(
                    `INSERT INTO grades (studentId, lessonId, grade, subjectId, createdAt) VALUES (?, ?, ?, ?, NOW())`,
                    [studentId, lessonId, gradeValue, subjectId]
                );
            }
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å)
        if (attendance_status !== undefined) {
            const [existingAttendance] = await db.promise().query(
                `SELECT * FROM attendance WHERE studentId = ? AND lessonId = ?`,
                [studentId, lessonId]
            );

            if (existingAttendance.length > 0) {
                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
                await db.promise().query(
                    `UPDATE attendance SET status = ?, comment = ?, createdAt = NOW() WHERE studentId = ? AND lessonId = ?`,
                    [attendance_status, attendance_comment, studentId, lessonId]
                );
            } else {
                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º
                await db.promise().query(
                    `INSERT INTO attendance (studentId, lessonId, status, comment, createdAt) VALUES (?, ?, ?, ?, NOW())`,
                    [studentId, lessonId, attendance_status, attendance_comment]
                );
            }
        }

        res.json({ message: "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;
